#![feature(async_await)]

use rust_graph::graph_impl::rpc_graph::server::*;
use std::io;
use tarpc::{
    client, context,
    server::{BaseChannel, Channel},
};
use tarpc_bincode_transport as bincode_transport;

#[runtime::main(runtime_tokio::Tokio)]
async fn main() -> io::Result<()> {
    let server_addr = ([127, 0, 0, 1], 18888).into();

    let transport = bincode_transport::connect(&server_addr).await?;

    // WorldClient is generated by the service attribute. It has a constructor `new` that takes a
    // config and any Transport as input.
    let mut client = GraphRPCClient::new(client::Config::default(), transport).spawn()?;

    // The client has an RPC method for each RPC defined in the annotated trait. It takes the same
    // args as defined, with the addition of a Context, which is always the first arg. The Context
    // specifies a deadline and trace information which can be helpful in debugging requests.
    let hello = client.neighbors(context::current(), 0).await?;

    println!("{:?}", hello);

    Ok(())
}
